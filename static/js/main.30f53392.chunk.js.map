{"version":3,"sources":["Timer/Input.module.css","Timer/TimerScoreboard.tsx","Timer/Button.tsx","Timer/TimerButtons.tsx","Timer/Timer.tsx","Timer/SetInputValue.tsx","Timer/SetTimerScoreboard.tsx","Timer/SetTimer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","TimerScoreboard","props","countClass","count","maxValue","className","error","editMode","Button","onClick","setEditMode","setCount","minDisabledValue","disabled","maxDisabledValue","title","TimerButtons","increase","reset","value","Timer","SetInputValue","type","onChange","e","number","Number","currentTarget","update","SetTimerScoreboard","inputClassName","s","inputError","inputDefault","setError","updateMaxValue","updateValue","SetTimer","install","App","useState","setValue","maxSetValue","useEffect","valueString","localStorage","getItem","valueNumber","JSON","parse","countString","countNumber","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30f53392.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputError\":\"Input_inputError__wJf-f\",\"inputDefault\":\"Input_inputDefault__2VDQl\"};","import React from \"react\";\r\n\r\ntype TimerScoreboardProps = {\r\n    count: number\r\n    value: number\r\n    maxValue: number\r\n    editMode: boolean\r\n    setEditMode: (editMode: boolean) => void\r\n    error: boolean\r\n}\r\n\r\nexport function TimerScoreboard(props: TimerScoreboardProps) {\r\n\r\n    const countClass = props.count === props.maxValue ? \"red\" : \"\"\r\n\r\n    return (\r\n        <div className=\"scoreboard\">\r\n            {\r\n                props.error\r\n                    ? <h3 className=\"editMode\">error</h3>\r\n                    : props.editMode\r\n                    ? <h3 className=\"editMode\">settings</h3>\r\n                    : <h3 className={countClass}>{props.count}</h3>\r\n            }\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\ntype TimerButtonProps = {\r\n    onClick: () => void\r\n    title: string\r\n    minDisabledValue: number\r\n    maxDisabledValue: number\r\n    editMode?: boolean\r\n    setEditMode?: (editMode: boolean) => void\r\n    setCount?: (value: number) => void\r\n    error?: boolean\r\n}\r\n\r\nexport function Button(props: TimerButtonProps) {\r\n\r\n    const onClick = () => {\r\n        props.onClick();\r\n        props.setEditMode && props.setEditMode(false);\r\n        if (props.setCount && props.minDisabledValue) {\r\n            props.setCount(props.minDisabledValue)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"button\">\r\n                <button onClick={onClick}\r\n                        disabled={(props.editMode || props.error ||\r\n                            props.maxDisabledValue === props.minDisabledValue)}\r\n                >{props.title}</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Button} from \"./Button\";\r\n\r\ntype ButtonsType = {\r\n    increase: () => void\r\n    reset: () => void\r\n    count: number\r\n    maxValue: number\r\n    value: number\r\n    editMode: boolean\r\n}\r\n\r\nexport function TimerButtons(props: ButtonsType) {\r\n\r\n    const increase = () => props.increase()\r\n    const reset = () => props.reset()\r\n\r\n    return (\r\n        <div className=\"buttons\">\r\n            <Button title=\"inc\"\r\n                    onClick={increase}\r\n                    maxDisabledValue={props.maxValue}\r\n                    minDisabledValue={props.count}\r\n                    editMode={props.editMode}\r\n            />\r\n            <Button title=\"reset\"\r\n                    onClick={reset}\r\n                    maxDisabledValue={props.value}\r\n                    minDisabledValue={props.count}\r\n                    editMode={props.editMode}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {TimerScoreboard} from \"./TimerScoreboard\";\r\nimport {TimerButtons} from \"./TimerButtons\";\r\nimport React from \"react\";\r\nimport './Timer.css';\r\n\r\ntype TimerPropsType = {\r\n    count: number\r\n    increase: () => void\r\n    reset: () => void\r\n    value: number\r\n    maxValue: number\r\n    editMode: boolean\r\n    setEditMode: (editMode: boolean) => void\r\n    error: boolean\r\n}\r\n\r\nexport function Timer(props: TimerPropsType) {\r\n    return (\r\n        <div className=\"timerValue\">\r\n            <TimerScoreboard\r\n                count={props.count}\r\n                value={props.value}\r\n                maxValue={props.maxValue}\r\n                setEditMode={props.setEditMode}\r\n                editMode={props.editMode}\r\n                error={props.error}\r\n            />\r\n            <TimerButtons increase={props.increase}\r\n                          reset={props.reset}\r\n                          count={props.count}\r\n                          maxValue={props.maxValue}\r\n                          value={props.value}\r\n                          editMode={props.editMode}/>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputValuePropsType = {\r\n    title: string\r\n    value: number\r\n    update: (value: number) => void\r\n    setEditMode: (editMode: boolean) => void\r\n    className: string\r\n}\r\n\r\nexport function SetInputValue(props: InputValuePropsType) {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let number = Number(e.currentTarget.value)\r\n        props.update(number)\r\n        props.setEditMode(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.title} <input className={props.className}\r\n                                 type=\"number\"\r\n                                 value={props.value}\r\n                                 onChange={onChangeHandler}\r\n        />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {SetInputValue} from \"./SetInputValue\";\r\nimport s from \"./Input.module.css\"\r\n\r\ntype ScoreboardProps = {\r\n    value: number\r\n    maxValue: number\r\n    updateValue: (value: number) => void\r\n    updateMaxValue: (value: number) => void\r\n    setEditMode: (editMode: boolean) => void\r\n    error: boolean\r\n    setError: (error: boolean) => void\r\n}\r\n\r\nexport function SetTimerScoreboard(props: ScoreboardProps) {\r\n\r\n    const inputClassName = `${(props.maxValue <= props.value || props.value < 0 || props.maxValue<0) ? s.inputError : s.inputDefault}`\r\n\r\n    return (\r\n        <div className=\"scoreboard\">\r\n            {props.value >= props.maxValue || props.value < 0 || props.maxValue < 0 ? props.setError(true) : props.setError(false)}\r\n\r\n            <SetInputValue title=\" maximum value: \"\r\n                           value={props.maxValue}\r\n                           update={props.updateMaxValue}\r\n                           setEditMode={props.setEditMode}\r\n                           className={inputClassName}\r\n            />\r\n            <SetInputValue title=\" starting value: \"\r\n                           value={props.value}\r\n                           update={props.updateValue}\r\n                           setEditMode={props.setEditMode}\r\n                           className={inputClassName}\r\n            />\r\n        </div>\r\n    );\r\n}","import {SetTimerScoreboard} from \"./SetTimerScoreboard\";\r\nimport React from \"react\";\r\nimport './SetTimer.css';\r\nimport {Button} from \"./Button\";\r\n\r\ntype SetTimerPropsType = {\r\n    value: number\r\n    maxValue: number\r\n    install: () => void\r\n    updateValue: (value: number) => void\r\n    updateMaxValue: (value: number) => void\r\n    setEditMode: (editMode: boolean) => void\r\n    setCount: (value: number) => void\r\n    error: boolean\r\n    setError: (error: boolean)=>void\r\n}\r\n\r\nexport function SetTimer(props: SetTimerPropsType) {\r\n    return (\r\n        <div className=\"setTimerValue\">\r\n            <SetTimerScoreboard\r\n                value={props.value}\r\n                maxValue={props.maxValue}\r\n                updateValue={props.updateValue}\r\n                updateMaxValue={props.updateMaxValue}\r\n                setEditMode={props.setEditMode}\r\n                error={props.error}\r\n                setError={props.setError}\r\n            />\r\n            <Button onClick={props.install}\r\n                    title=\"set\"\r\n                    minDisabledValue={props.value}\r\n                    maxDisabledValue={props.maxValue}\r\n                    setEditMode={props.setEditMode}\r\n                    setCount={props.setCount}\r\n                    error={props.error}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Timer} from \"./Timer/Timer\";\nimport {SetTimer} from \"./Timer/SetTimer\";\n\nfunction App() {\n\n    let [value, setValue] = useState<number>(0)//set-timer\n    let [maxValue, maxSetValue] = useState<number>(0)//set-timer\n\n    const Install = () => {//set-timer\n        localStorage.setItem(\"Value\", JSON.stringify(value));\n        localStorage.setItem(\"MaxValue\", JSON.stringify(maxValue));\n    }\n\n    useEffect(() => {//set-timer\n        let valueString = localStorage.getItem(\"Value\")\n        if (valueString) {\n            let valueNumber = JSON.parse(valueString)\n            setValue(valueNumber)\n        }\n    }, [])\n\n    useEffect(() => {//set-timer\n        let valueString = localStorage.getItem(\"MaxValue\")\n        if (valueString) {\n            let valueNumber = JSON.parse(valueString)\n            maxSetValue(valueNumber)\n        }\n    }, [])\n\n    const UpdateValue = (value: number) => {//set-timer\n        setValue(value)\n    }\n    const UpdateMaxValue = (maxValue: number) => {//set-timer\n        maxSetValue(maxValue)\n    }\n\n    let [editMode, setEditMode] = useState<boolean>(false)\n    let [error, setError] = useState<boolean>(false)\n\n    let [count, setCount] = useState<number>(value)//timer\n\n    useEffect(() => {//timer\n        let countString = localStorage.getItem(\"Count\")\n        if (countString) {\n            let countNumber = JSON.parse(countString)\n            setCount(countNumber)\n        }\n    }, [])\n\n    useEffect(() => {//timer\n        localStorage.setItem(\"Count\", JSON.stringify(value));\n    }, [value])\n\n    function increase() {//timer\n        setCount(count + 1);\n    }//timer\n    function reset() {//timer\n        setCount(value);\n    }//timer\n\n    return (\n        <div className=\"App\">\n            <div className=\"setTimer\">\n                <SetTimer value={value}\n                          maxValue={maxValue}\n                          install={Install}\n                          updateValue={UpdateValue}\n                          updateMaxValue={UpdateMaxValue}\n                          setEditMode={setEditMode}\n                          setCount={setCount}\n                          error={error}\n                          setError={setError}\n                />\n            </div>\n            <div className=\"timer\">\n                <Timer\n                    count={count}\n                    increase={increase}\n                    reset={reset}\n                    value={value}\n                    maxValue={maxValue}\n                    editMode={editMode}\n                    setEditMode={setEditMode}\n                    error={error}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}