{"version":3,"sources":["SetTimer/SetInputValue.tsx","SetTimer/SetTimerScoreboard.tsx","SetTimer/SetTimerButton.tsx","SetTimer/SetTimer.tsx","Timer/TimerScoreboard.tsx","Timer/TimerButton.tsx","Timer/TimerButtons.tsx","Timer/Timer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SetInputValue","props","title","type","value","onChange","e","number","Number","currentTarget","update","SetTimerScoreboard","className","maxValue","updateMaxValue","updateValue","SetTimerButton","onClick","install","SetTimer","TimerScoreboard","countClass","count","TimerButton","disabled","TimerButtons","increase","reset","Timer","App","useState","setValue","maxSetValue","useEffect","valueString","localStorage","getItem","valueNumber","JSON","parse","setCount","countString","countNumber","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88d77771.chunk.js","sourcesContent":["import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputValuePropsType = {\r\n    title: string\r\n    value: number\r\n    update: (value: number) => void\r\n}\r\n\r\nexport function SetInputValue(props: InputValuePropsType){\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let number = Number(e.currentTarget.value)\r\n\r\n        props.update(number)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {props.title} <input type=\"number\" value={props.value} onChange={onChangeHandler}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {SetInputValue} from \"./SetInputValue\";\r\n\r\ntype ScoreboardProps = {\r\n    value: number\r\n    maxValue: number\r\n    updateValue: (value: number) => void\r\n    updateMaxValue: (value: number) => void\r\n}\r\n\r\nexport function SetTimerScoreboard(props: ScoreboardProps) {\r\n\r\n    return (\r\n        <div className=\"scoreboard\">\r\n            <SetInputValue title=\" maximum value: \" value={props.maxValue} update={props.updateMaxValue}/>\r\n            <SetInputValue title=\" starting value: \" value={props.value} update={props.updateValue}/>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\ntype ButtonProps = {\r\n    title: string\r\n    install: ()=> void\r\n    value?: number\r\n}\r\n\r\nexport function SetTimerButton(props: ButtonProps) {\r\n\r\n    const onClick = () => {props.install()}\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"button\">\r\n                <button onClick={onClick}\r\n                >{props.title}</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {SetTimerScoreboard} from \"./SetTimerScoreboard\";\r\nimport {SetTimerButton} from \"./SetTimerButton\";\r\nimport React from \"react\";\r\nimport './SetTimer.css';\r\n\r\ntype SetTimerPropsType = {\r\n    value: number\r\n    maxValue: number\r\n    install: () => void\r\n    updateValue: (value: number) => void\r\n    updateMaxValue: (value: number) => void\r\n\r\n}\r\n\r\nexport function SetTimer(props: SetTimerPropsType) {\r\n    return (\r\n        <div className=\"setTimerValue\">\r\n            <SetTimerScoreboard\r\n                value={props.value}\r\n                maxValue={props.maxValue}\r\n                updateValue={props.updateValue}\r\n                updateMaxValue={props.updateMaxValue}\r\n            />\r\n            <SetTimerButton\r\n                title=\"set\"\r\n                value={props.value}\r\n                install={props.install}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\ntype TimerScoreboardProps = {\r\n    count: number\r\n    value: number\r\n    maxValue: number\r\n}\r\n\r\nexport function TimerScoreboard(props: TimerScoreboardProps) {\r\n\r\n    const countClass = props.count === props.maxValue ? \"red\" : \"\"\r\n\r\n    return (\r\n        <div className=\"scoreboard\">\r\n            <h3 className={countClass}>{props.count}</h3>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\ntype TimerButtonProps = {\r\n    onClick: () => void\r\n    title: string\r\n    count: number\r\n    disabled: number\r\n}\r\n\r\nexport function TimerButton(props: TimerButtonProps) {\r\n    return (\r\n        <div>\r\n            <div className=\"button\">\r\n                <button onClick={props.onClick}\r\n                        disabled={props.count === props.disabled}\r\n                >{props.title}</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {TimerButton} from \"./TimerButton\";\r\n\r\ntype ButtonsType = {\r\n    increase: () => void\r\n    reset: () => void\r\n    count: number\r\n    maxValue: number\r\n    value: number\r\n}\r\n\r\nexport function TimerButtons(props: ButtonsType) {\r\n\r\n    const increase = () => props.increase()\r\n    const reset = () => props.reset()\r\n\r\n    return (\r\n        <div className=\"buttons\">\r\n            <TimerButton title=\"inc\"\r\n                         onClick={increase}\r\n                         disabled={props.maxValue}\r\n                         count={props.count}\r\n            />\r\n            <TimerButton title=\"reset\"\r\n                         onClick={reset}\r\n                         disabled={props.value}\r\n                         count={props.count}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {TimerScoreboard} from \"./TimerScoreboard\";\r\nimport {TimerButtons} from \"./TimerButtons\";\r\nimport React from \"react\";\r\nimport './Timer.css';\r\n\r\ntype TimerPropsType = {\r\n    count: number\r\n    increase: () => void\r\n    reset: () => void\r\n    value: number\r\n    maxValue: number\r\n}\r\n\r\nexport function Timer(props: TimerPropsType) {\r\n    return (\r\n        <div className=\"timerValue\">\r\n            <TimerScoreboard\r\n                count={props.count}\r\n                value={props.value}\r\n                maxValue={props.maxValue}\r\n            />\r\n            <TimerButtons increase={props.increase}\r\n                          reset={props.reset}\r\n                          count={props.count}\r\n                          maxValue={props.maxValue}\r\n                          value={props.value}/>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {SetTimer} from './SetTimer/SetTimer';\nimport {Timer} from \"./Timer/Timer\";\n\n\nfunction App() {\n\n    let [value, setValue] = useState<number>(0)//set-timer\n    let [maxValue, maxSetValue] = useState<number>(0)//set-timer\n\n    const Install = () => {//set-timer\n        localStorage.setItem(\"Value\", JSON.stringify(value));\n        localStorage.setItem(\"MaxValue\", JSON.stringify(maxValue));\n    }\n\n    useEffect(() => {//set-timer\n        let valueString = localStorage.getItem(\"Value\")\n        if (valueString) {\n            let valueNumber = JSON.parse(valueString)\n            setValue(valueNumber)\n        }\n    }, [])\n\n    useEffect(() => {//set-timer\n        let valueString = localStorage.getItem(\"MaxValue\")\n        if (valueString) {\n            let valueNumber = JSON.parse(valueString)\n            maxSetValue(valueNumber)\n        }\n    }, [])\n\n\n    const UpdateValue = (value:number) => {\n        setValue(value)\n    }\n    const UpdateMaxValue = (maxValue: number) => {\n        maxSetValue(maxValue)\n    }\n\n    let [count, setCount] = useState<number>(value)//timer\n\n    useEffect(() => {//timer\n        let countString = localStorage.getItem(\"Count\")\n        if (countString) {\n            let countNumber = JSON.parse(countString)\n            setCount(countNumber)\n        }\n    }, [])\n\n    useEffect( ()=> {\n        localStorage.setItem(\"Count\", JSON.stringify(value));\n    }, [value])\n\n    function increase() {//timer\n        setCount(count + 1);\n    }//timer\n    function reset() {\n        setCount(value);\n    }//timer\n\n    return (\n        <div className=\"App\">\n            <h3>set-timer</h3>\n            <div className=\"setTimer\">\n                <SetTimer value={value}\n                          maxValue={maxValue}\n                          install={Install}\n                          updateValue={UpdateValue}\n                          updateMaxValue={UpdateMaxValue}\n                />\n            </div>\n            <div className=\"timer\">\n                <Timer\n                    count={count}\n                    increase={increase}\n                    reset={reset}\n                    value={value}\n                    maxValue={maxValue}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}